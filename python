# SLIP 1(A) 
# Write a Python program to accept n numbers in list and remove duplicates from 
# a list. 
 
def remove_duplicates(): 
    n = int(input("Enter the number of elements: ")) 
    num_list = [] 
     
    for i in range(n): 
        num = int(input(f"Enter number {i+1}: ")) 
        num_list.append(num) 
     
    unique_list = list(set(num_list)) 
    print("List after removing duplicates:", unique_list) 
 
remove_duplicates() 
 
 
# SLIP 1(B) 
# Write Python GUI program to take accept your birthdate and output your age 
# when a button is pressed. 
 
import tkinter as tk 
frm=tk.Tk(); 
from datetime import datetime 
def displayage(): 
    dobstr=txtdob.get(); 
    bdate=datetime.strptime(dobstr,"%d/%m/%Y") 
 
    today=datetime.today(); 
    age=today.year-bdate.year; 
    lblAge.config(text=f"Your age is {age}") 
     
label1=tk.Label(frm,text="Enter Bdate(dd-mm-yyy)"); 
lblAge=tk.Label(frm,text="") 
txtdob=tk.Entry(frm,width=30) 
btn1=tk.Button(frm,text="DisplayAge",command=displayage) 
label1.pack(pady=10); 
txtdob.pack(); 
btn1.pack(pady=10); 
lblAge.pack(pady=10); 


# SLIP 2(A) 
# Write a Python function that accepts a string and calculate the number of 
# upper case letters and lower case letters. Sample String: 'The quick Brown 
# Fox'  
# Expected Output: No. of Upper case characters: 3 No. of Lower case characters: 
# 13 
s=input("Enter a string"); 
cnt=0,upp=0; 
for ch in s: 
if ch.isLower(): 
cnt=cnt+1; 
elif ch.isUpper(): 
upp=upp+1; 
print("Total Upper Cases: ",upp); 
print("Total Lower Cases: ",cnt); 


# SLIP 2(B) 
# Write Python GUI program to create a digital clock with Tkinter to display the 
# time. 
import tkinter as tk 
import  time 
def  display_clock(): 
currenttime=time.strftime("%H:%M:%S"); 
lblTime.config(text=currenttime); 
lblTime.after(1000,display_clock); 
frm=tk.Tk(); 
frm.title("Digital  clock"); 
frm.geometry("300x300"); 
lblTime=tk.Label(frm,font=("Arial",40),bg="black",fg="white"); 
lblTime.pack(pady=20); 
display_clock(); 
 
 
# SLIP 3(A) 
# Write a Python program to check if a given key already exists in a dictionary. 
# If key exists replace with another key/value pair 
 
d={'A':1,'B':2,'C':3} 
key=input("Enter key to check:") 
check_value = input("Enter Value: ") 
if key in d.keys(): 
print("Key is present and value of the key is:") 
print(d[key]) 
d.pop(key) 
d[key]=check_value 
else: 
print("Key isn't present!") 
d[key]=check_value 
print("Updated dictionary : ",d) 
 
 
# SLIP 3(B) 
# Write a python script to define a class student having members roll no, name, 
# age, gender. Create a subclass called Test with member marks of 3 subjects. 
# Create three objects of the Test class and display all the details of the 
# student with total marks. 
 
# Define the parent class Student 
class Student: 
    def __init__(self, roll_no, name, age, gender): 
        self.roll_no = roll_no 
        self.name = name 
        self.age = age 
        self.gender = gender 
 
    def display_student_details(self): 
        print(f"Roll No: {self.roll_no}") 
        print(f"Name: {self.name}") 
        print(f"Age: {self.age}") 
        print(f"Gender: {self.gender}") 
 
# Define the subclass Test, inheriting from Student 
class Test(Student): 
    def __init__(self, roll_no, name, age, gender, marks): 
        super().__init__(roll_no, name, age, gender) 
        self.marks = marks  # Marks is a list of 3 subject marks 
 
    def total_marks(self): 
        return sum(self.marks) 
 
 
    def display_details_with_marks(self): 
        self.display_student_details() 
        print(f"Marks: {self.marks}") 
        print(f"Total Marks: {self.total_marks()}") 
        print("-" * 40) 
 
# Create three objects of the Test class 
student1 = Test(101, "Ramdas", 20, "Male", [85, 90, 88]) 
student2 = Test(102, "Neha", 21, "Female", [75, 82, 79]) 
student3 = Test(103, "Kavya", 22, "Female", [92, 89, 95]) 
 
# Display details of each student along with total marks 
students = [student1, student2, student3] 
for student in students: 
    student.display_details_with_marks() 
 
 
 
# SLIP 4(A) 
# Write Python GUI program to create background with changing colors 
import tkinter as tk 
import random 
 
def change_bg_color(): 
    color = random.choice(["red", "green", "blue", "yellow", "purple", 
"orange", "pink", "cyan"]) 
    frm.config(bg=color) 
    # Schedule the function to run again after 1 second (1000 milliseconds) 
    frm.after(1000, change_bg_color) 
 
frm = tk.Tk() 
frm.title("Changing Background Color") 
frm.geometry("400x300") 
change_bg_color() 
 
  
# SLIP 4(B) 
# Define a class Employee having members id, name, department, salary. Create a 
# subclass called manager with member bonus. Define methods accept and display 
# in both the classes. Create n objects of the manager class and display the 
# details of the manager having the maximum total salary (salary+bonus). 

# Define the Employee class 
class Employee: 
    def __init__(self): 
        self.id = None 
        self.name = None 
        self.department = None 
        self.salary = None 
 
    # Method to accept employee details 
    def accept(self): 
        self.id = input("Enter Employee ID: ") 
        self.name = input("Enter Employee Name: ") 
        self.department = input("Enter Department: ") 
        self.salary = float(input("Enter Salary: ")) 
 
    # Method to display employee details 
    def display(self): 
        print(f"ID: {self.id}") 
        print(f"Name: {self.name}") 
        print(f"Department: {self.department}") 
        print(f"Salary: {self.salary}") 
 
# Define the Manager class inheriting from Employee 
class Manager(Employee): 
    def __init__(self): 
        super().__init__() 
        self.bonus = None 
 
    # Method to accept manager details 
    def accept(self): 
        super().accept()  # Call the parent class's accept method 
        self.bonus = float(input("Enter Bonus: ")) 
 
    # Method to display manager details 
    def display(self): 
        super().display()  # Call the parent class's display method 
        print(f"Bonus: {self.bonus}") 
        print(f"Total Salary: {self.salary + self.bonus}") 
 
        print("-" * 40) 
 
# Function to find the manager with the maximum total salary 
def find_max_total_salary(managers): 
    max_manager = max(managers, key=lambda m: m.salary + m.bonus) 
    return max_manager 
 
# Main program 
if __name__ == "__main__": 
    n = int(input("Enter the number of managers: ")) 
     
    # Create a list to store Manager objects 
    managers = [] 
 
    # Accept details for n managers 
    for i in range(n): 
        print(f"\nEnter details for Manager {i+1}:") 
        manager = Manager() 
        manager.accept() 
        managers.append(manager) 
 
    # Display details of all managers 
    print("\nDetails of all managers:") 
    for manager in managers: 
        manager.display() 
 
    # Find and display the manager with the maximum total salary 
    max_manager = find_max_total_salary(managers) 
    print("\nManager with the maximum total salary:") 
    max_manager.display() 
 
 
 
 
# SLIP 5(A) 
# Write a Python script using class, which has two methods get_String and 
# print_String. get_String accept a string from the user and print_String print 
# the string in upper case. 
 
class StringUpper: 
    def getString(self): 
        self.s=input("Enter a string") 
    def printString(self): 
       print("String after conversion:",self.s.upper()) 
       
su=StringUpper 
su.getString() 
su.printString() 
 
 
# SLIP 5(B) 
# Write a python script to generate Fibonacci terms using generator function. 
 
n = int(input("How many terms? ")) 
n1, n2 = 0, 1 
count = 0 
if n <= 0: 
    print("Please enter a positive integer") 
elif nterms == 1: 
    print("Fibonacci sequence upto",n,":") 
    print(n1) 
else: 
    print("Fibonacci sequence:") 
while count < n: 
    print(n1) 
    nth = n1 + n2 
    n1 = n2 
    n2 = nth 
    count += 1 
 
# SLIP 6(A) 
# Write python script using package to calculate area and volume of cube and 
sphere 
 
import math 
class cube(): 
    def __init__(self,edge): 
            self.edge=edge 
    def cube_area(self): 
         cubearea=6*self.edge*self.edge 
        print("Area of cube :",cubearea) 
    def cube_volume(self): 
        cubevolume=self.edge*self.edge*self.edge 
        print("Volume of cube :",cubevolume) 
class sphere(): 
    def __init__(self,radius): 
        self.radius=radius 
    def sphere_area(self): 
        spherearea=4*math.pi*self.radius*self.radius; 
        print("Area of sphere :",spherearea) 
    def sphere_volume(self): 
        spherevolume=float(4/3*math.pi*self.radius**3) 
        print("volume of sphere :",spherevolume) 
e1=cube(5) 
e1.cube_area() 
e1.cube_volume() 
r1=sphere(5) 
 
r1.sphere_area() 
r1.sphere_volume() 
 
 
# SLIP 6(B) 
# Write a Python GUI program to create a label and change the label font style 
# (font name, bold, size). Specify separate check button for each style. 
 
import tkinter as tk 
from tkinter import font 
 
def update_font(): 
    # Base font family and size 
    current_font = font.Font(family="Arial", size=16) 
     
    # Update font family if another font is selected 
    if var_font.get() == 1: 
        current_font.config(family="Courier") 
     
    # Apply bold style if the checkbutton is selected 
    if var_bold.get() == 1: 
        current_font.config(weight="bold") 
    else: 
        current_font.config(weight="normal") 
     
    # Update font size based on the checkbox 
    if var_size.get() == 1: 
        current_font.config(size=24) 
     
    # Apply the updated font to the label 
    label.config(font=current_font) 
 
# Create the main window 
frm = tk.Tk() 
frm.title("Change Label Font Style") 
frm.geometry("400x300") 
 
# Create the label 
label = tk.Label(frm, text="Hello, Tkinter!", font=("Arial", 16)) 
label.pack(pady=20) 
 
# Variables for the checkbuttons 
var_font = tk.IntVar() 
var_bold = tk.IntVar() 
var_size = tk.IntVar() 
 
# Create checkbuttons for font family, bold, and size 
 
chk_font = tk.Checkbutton(frm, text="Courier Font", variable=var_font, 
command=update_font) 
chk_font.pack() 
 
chk_bold = tk.Checkbutton(frm, text="Bold", variable=var_bold, 
command=update_font) 
chk_bold.pack() 
 
chk_size = tk.Checkbutton(frm, text="Larger Font Size", variable=var_size, 
command=update_font) 
chk_size.pack() 
 

# SLIP 7(A) 
# Write Python class to perform addition of two complex numbers using binary + 
# operator overloading. 
 
class ComplexNumber: 
    def __init__(self, real, imag): 
        self.real = real  # Real part of the complex number 
        self.imag = imag  # Imaginary part of the complex number 
 
    # Overload the + operator to add two complex numbers 
    def __add__(self, other): 
        return ComplexNumber(self.real + other.real, self.imag + other.imag) 
 
    # Display the complex number in a+bi form 
    def __str__(self): 
        if self.imag >= 0: 
            return f"{self.real} + {self.imag}i" 
        else: 
            return f"{self.real} - {-self.imag}i" 
 
# Main code to create and add two complex numbers 
if __name__ == "__main__": 
    # Create two complex numbers 
    num1 = ComplexNumber(3, 4)  # 3 + 4i 
    num2 = ComplexNumber(1, 2)  # 1 + 2i 
 
    # Perform addition using the overloaded + operator 
    result = num1 + num2 
 
    # Display the result 
    print(f"First Complex Number: {num1}") 
    print(f"Second Complex Number: {num2}") 
    print(f"Sum: {result}") 
 
 

# SLIP 7(B) 
# Write python GUI program to generate a random password with upper and lower 
# case letters. 
 
import tkinter as tk 
import random 
import string 
 
def generate_password(): 
    # Define the characters to include in the password (uppercase and lowercase letters) 
    characters = string.ascii_letters  # This contains both uppercase and lowercase letters 
    password_length = 12  # Set the length of the password 
     
    # Generate a random password of specified length 
    password = ''.join(random.choice(characters) for i in 
range(password_length)) 
     
    # Display the generated password in the entry box 
    password_entry.delete(0, tk.END)  # Clear the previous password 
    password_entry.insert(0, password)  # Insert the new password 
 
# Create the main window 
frm = tk.Tk() 
frm.title("Random Password Generator") 
frm.geometry("400x200") 
 
# Create a label 
label = tk.Label(frm, text="Click the button to generate a random password", 
font=("Arial", 14)) 
label.pack(pady=20) 
 
password_entry = tk.Entry(frm, width=30) 
password_entry.pack(pady=10) 
 
# Create a button to trigger password generation 
generate_button = tk.Button(frm, text="Generate Password", 
command=generate_password, font=("Arial", 12)) 
generate_button.pack(pady=10) 
 
 

# SLIP 8(A) 
# Write a python script to find the repeated items of a tuple 
# Function to find repeated items in a tuple 
def find_repeated_items(input_tuple): 
    # Create an empty dictionary to store the frequency of each item 
    frequency = {} 
 
    # Count the occurrences of each item in the tuple 
    for item in input_tuple: 
        if item in frequency: 
            frequency[item] += 1 
        else: 
            frequency[item] = 1 
 
    # Find and print the repeated items 
    repeated_items = [item for item, count in frequency.items() if count > 1] 
     
    if repeated_items: 
        print(f"Repeated items in the tuple: {repeated_items}") 
    else: 
        print("No repeated items found.") 
 
# Sample tuple 
sample_tuple = (1, 2, 3, 4, 5, 2, 3, 6, 1, 7, 8, 9, 2) 
 
# Find repeated items 
find_repeated_items(sample_tuple) 
 
 
 
# SLIP 8(B) 
# Write a Python class which has two methods get_String and print_String. 
# get_String accept a string from the user and print_String print the string in 
# upper case. Further modify the program to reverse a string word by word and 
# print it in lower case. 
 
class MyClass: 
    def Get_String(self): 
        self.MyStr=input("Enter any String: ") 
    def Print_String(self): 
        s=self.MyStr 
        print("String in Upper Case: " , s.upper()) 
        cnt=len(s) 
 
        i=cnt-1 
        RevStr="" 
        while(i >= 0): 
            RevStr=RevStr + s[i] 
            i=i-1 
print("String in Reverse & Lower case:" , RevStr.lower()) 
obj=MyClass() 
obj.Get_String() 
obj.Print_String() 



# SLIP 9(A) 
# Write a Python script using class to reverse a string word by word 
class MyClass: 
    def Get_String(self): 
        self.MyStr=input("Enter any String: ") 
    def Print_String(self): 
        s=self.MyStr 
        cnt=len(s) 
        i=cnt-1 
        RevStr="" 
        while(i >= 0): 
            RevStr=RevStr + s[i] 
            i=i-1 
print("String in Reverse:" , RevStr) 
obj=MyClass() 
obj.Get_String() 
obj.Print_String() 
 

# SLIP 9(B) 
# Write Python GUI program to accept a number n and check whether it is Prime, 
# Perfect or Armstrong number or not. Specify three radio buttons. 
import tkinter as tk 
from tkinter import messagebox 
 
# Function to check if a number is prime 
def is_prime(n): 
    if n <= 1: 
        return False 
    for i in range(2, int(n ** 0.5) + 1): 
        if n % i == 0: 
            return False 
    return True 
 
# Function to check if a number is perfect 
def is_perfect(n): 
    if n < 1: 
 
        return False 
    divisors_sum = sum([i for i in range(1, n) if n % i == 0]) 
    return divisors_sum == n 
 
# Function to check if a number is an Armstrong number 
def is_armstrong(n): 
    num_digits = len(str(n)) 
    total = sum([int(digit) ** num_digits for digit in str(n)]) 
    return total == n 
 
# Function to handle the radio button selection and check the number 
def check_number(): 
    try: 
        n = int(entry.get())  # Get the input number from the entry box 
         
        if selected_option.get() == 1:  # Check if Prime is selected 
            result = "Prime" if is_prime(n) else "Not Prime" 
         
        elif selected_option.get() == 2:  # Check if Perfect is selected 
            result = "Perfect" if is_perfect(n) else "Not Perfect" 
         
        elif selected_option.get() == 3:  # Check if Armstrong is selected 
            result = "Armstrong" if is_armstrong(n) else "Not Armstrong" 
         
        # Show the result in a messagebox 
        messagebox.showinfo("Result", f"The number {n} is {result}.") 
     
    except ValueError: 
        messagebox.showerror("Error", "Please enter a valid number.") 
 
# Create the main window 
root = tk.Tk() 
root.title("Number Checker") 
root.geometry("300x300") 
 
# Create and place a label 
label = tk.Label(root, text="Enter a number:", font=("Arial", 12)) 
label.pack(pady=10) 
 
# Create an entry widget to accept the number 
entry = tk.Entry(root, font=("Arial", 12)) 
entry.pack(pady=10) 
 
# Variable to store the selected option (Prime, Perfect, Armstrong) 
selected_option = tk.IntVar() 
 
# Create radio buttons for Prime, Perfect, and Armstrong 
radio_prime = tk.Radiobutton(root, text="Prime", variable=selected_option, 
value=1, font=("Arial", 12)) 
radio_prime.pack() 
radio_perfect = tk.Radiobutton(root, text="Perfect", variable=selected_option, 
value=2, font=("Arial", 12)) 
radio_perfect.pack() 
radio_armstrong = tk.Radiobutton(root, text="Armstrong", 
variable=selected_option, value=3, font=("Arial", 12)) 
radio_armstrong.pack() 
# Create a button to check the number 
check_button = tk.Button(root, text="Check Number", command=check_number, 
font=("Arial", 12)) 
check_button.pack(pady=20) 
# Start the Tkinter event loop 
root.mainloop() 



# SLIP 10(A) 
# Write Python GUI program to display an alert message when a button is pressed. 
import tkinter as tk 
from tkinter import messagebox 
frm=tk.Tk(); 
def showalert(): 
messagebox.showinfo("Alert box","You clicked Button"); 
btn1=tk.Button(frm,text="Pressme",command=showalert) 
btn1.pack(pady=10); 
 
 
# SLIP 10(B) 
# Write a Python class to find validity of a string of parentheses, '(', ')', 
# '{', '}', '[' ']’. These brackets must be close in the correct order. for 
# example "()" and "()[]{}" are valid but "[)", "({[)]" and "{{{" are invalid 
 
class ParenthesesValidator: 
    def __init__(self): 
        # Dictionary to map each closing bracket to its corresponding opening 
bracket 
    self.bracket_map = {')': '(', '}': '{', ']': '['} 
 
    def is_valid(self, s): 
        stack = []  # Stack to store opening brackets 
 
        # Traverse each character in the string 
        for char in s: 
            # If the character is a closing bracket 
            if char in self.bracket_map: 
                # Pop the top element from the stack (if stack is empty, use a 
dummy value '#') 
                top_element = stack.pop() if stack else '#' 
 
                # If the top element doesn't match the corresponding opening 
bracket, return False 
                if self.bracket_map[char] != top_element: 
                    return False 
            else: 
                # If it's an opening bracket, push it onto the stack 
                stack.append(char) 
 
        # If the stack is empty, all brackets are matched correctly 
        return not stack 
 
# Test cases 
if __name__ == "__main__": 
    validator = ParenthesesValidator() 
 
    test_strings = ["()", "()[]{}", "(]", "([)]", "{{{"] 
     
    for string in test_strings: 
        result = "Valid" if validator.is_valid(string) else "Invalid" 
        print(f"The string '{string}' is {result}.") 
 
 
 
 
 
# SLIP 11(A) 
# Write a Python program to compute element-wise sum of given tuples.  
# Original lists: (1, 2, 3, 4) (3, 5, 2, 1) (2, 2, 3, 1)  
# Element-wise sum of the said tuples: (6, 9, 8, 6) 
# Function to compute element-wise sum of tuples 
def element_wise_sum(*tuples): 
# Use zip to pair elements and sum them element-wise 
return tuple(map(sum, zip(*tuples))) 
# Given tuples 
tuple1 = (1, 2, 3, 4) 
tuple2 = (3, 5, 2, 1) 
tuple3 = (2, 2, 3, 1) 
# Compute element-wise sum 
result = element_wise_sum(tuple1, tuple2, tuple3) 
# Display the result 
print(f"Original tuples: {tuple1}, {tuple2}, {tuple3}") 
print(f"Element-wise sum of the tuples: {result}") 


# SLIP 11(B) 
# Write Python GUI program to add menu bar with name of colors as options to 
# change the background color as per selection from menu option. 
import tkinter as tk 
# Function to change the background color 
def change_color(color): 
frm.config(bg=color) 
# Create the main window 
frm = tk.Tk() 
frm.title("Change Background Color") 
frm.geometry("400x300")  # Set the size of the window 
# Create a menu bar 
menu_bar = tk.Menu(frm) 
# Create a dropdown "Colors" menu 
color_menu = tk.Menu(menu_bar, tearoff=0) 
# Add color options to the "Colors" menu 
colors = ['Red', 'Green', 'Blue', 'Yellow', 'White', 'Gray', 'Pink'] 
for color in colors: 
# Each menu item will change the background color to the selected color 
color_menu.add_command(label=color, command=lambda 
c=color:change_color(c)) 
# Add the "Colors" menu to the menu bar 
menu_bar.add_cascade(label="Colors", menu=color_menu) 
# Display the menu bar 
frm.config(menu=menu_bar) 



# SLIP 12(A) 
# Write a Python GUI program to create a label and change the label font style 
(font name, bold, size) using tkinter module. 
import tkinter as tk; 
frm=tk.Tk(); 
def changestyle(): 
lbl1.config(font=("courier",30,"bold")); 
lbl1=tk.Label(frm,text="this is default text") 
btn=tk.Button(frm,text="Display Table",command=changestyle) 
lbl1.pack(); 
btn.pack();


# SLIP 12(B) 
# Write a python program to count repeated characters in a string. Sample 
string: 'thequickbrownfoxjumpsoverthelazydog'  
Expected output: o-4, e-3, u-2, h-2, r-2, t-2 
str1='NRClassesLLPPune' 
st=set(str1); 
for x in st: 
if str1.count(x)>1: 
print(x," occurs ",str1.count(x)); 

 
# SLIP 13(A) 
# Write a Python program to input a positive integer. Display correct message 
# for correct and incorrect input. (Use Exception Handling) 
 
num = int (input("Enter Any Positive number:")) 
try: 
if num >= 0: 
raise ValueError("Positive Number-Input Number is Correct") 
else: 
raise ValueError("Positive Number-Input Number is InCorrect") 
except ValueError as e: 
print(e) 
 
 
# SLIP 13(B) 
# Write a program to implement the concept of queue using list. 
 
li=eval(input("Enter a list")); 
while true: 
    print("1. Add 2. Delete 3. Display 4. Exit"); 
    ch=int (input("Enter choice")); 
    if ch==1: 
        v=eval(input("Enter a value to be addes")); 
        li.append(v); 
    elif ch==2: 
        if (len(li)>0): 
            li.pop(0); 
        else:  
            print("No element to pop"); 
    elif ch==3: 
        print(li); 
    elif ch==4: 
        break; 
 

# SLIP 14(A) 
# Write a Python GUI program to accept dimensions of a cylinder and display the 
# surface area and volume of cylinder. 
 
import tkinter as tk 
 
frm=tk.Tk(); 
def displayvolume(): 
    r=int(txtRd.get()) 
    h=int(txtHt.get()) 
 
    vol=3.14*r**2*h; 
    lblAnswer1.config(text=vol); 
 
def displayarea(): 
    r=int(txtRd.get()) 
    h=int(txtHt.get()) 
    area=2*3.14*r*(r+h); 
    lblAnswer2.config(text=area); 
     
label1=tk.Label(frm,text="Enter Radius"); 
label1.pack(pady=10); 
txtRd=tk.Entry(frm,width=30) 
txtRd.pack(pady=10) 
 
label2=tk.Label(frm,text="Enter Height"); 
label2.pack(pady=10) 
txtHt=tk.Entry(frm,width=30) 
txtHt.pack(pady=10) 
 
lblAnswer1=tk.Label(frm,text=""); 
lblAnswer2=tk.Label(frm,text=""); 
 
btn1=tk.Button(frm,text="Display area",command=displayvolume) 
btn1.pack(); 
 
btn2=tk.Button(frm,text="Display Volume ",command=displayarea) 
btn2.pack(); 
 
lblAnswer1.pack(pady=10); 
lblAnswer2.pack(pady=10); 
 
 
 
# SLIP 14(B) 
# Write a Python program to display plain text and cipher text using a Caesar 
# encryption. 
st1=input("Enter text"); 
stc=""; 
for s in st1: 
    if s.isalpha(): 
        stc=stc+chr(ord(s)+3); #logic of ceaser cipher 
    else: 
        stc=stc+s; 
 
print("PlainText is ",st1); 
print("ciphertext is ",stc); 
 
 
# SLIP 15(A) 
# Write a Python class named Student with two attributes student_name, marks. 
# Modify the attribute values of the said class and print the original and 
# modified values of the said attributes.  
 
class Student: 
    def __init__(self, student_name, marks): 
        self.student_name = student_name  # Initialize the student's name 
        self.marks = marks  # Initialize the student's marks 
 
    def display(self): 
        # Display the current state of the student's attributes 
        print(f"Student Name: {self.student_name}, Marks: {self.marks}") 
 
    def modify(self, new_name, new_marks): 
        # Modify the student's name and marks 
        self.student_name = new_name 
        self.marks = new_marks 
 
# Main program 
if __name__ == "__main__": 
    # Create an instance of Student 
    student = Student("Ramdas", 85) 
 
    # Display original values 
    print("Original values:") 
    student.display() 
 
    # Modify the student's attributes 
    student.modify("Neha", 92) 
 
    # Display modified values 
    print("\nModified values:") 
    student.display() 
 
 
 
# SLIP 15(B) 
# Write a python program to accept string and remove the characters which have 
# odd index values of given string using user defined function 
 
def odd_values_string(str): 
    result = "" 
    for i in range(len(str)): 
        if i % 2 == 0: 
            result = result + str[i] 
            return result 
 
print("Enter the string you want: ") 
str=input() 
print(odd_values_string(str)) 
 
 
# SLIP 16(A) 
# Write a python script to create a class Rectangle with data member’s length, 
# width and methods area, perimeter which can compute the area and perimeter of 
# rectangle. 
 
class Rectangle: 
    def accept(self): 
        self.l=int(input("Enter length")) 
        self.b=int(input("Enter breadth")) 
    def area(self): 
        print("Area of rectangle is:",self.l*self.b) 
    def perimeter(self): 
        print("Perimeter of Rectangle is: ",2*(self.l+self.b)) 
 
r=Rectangle() 
r.accept() 
r.area() 
r.perimeter() 
 
 
# SLIP 16(B) 
# Write Python GUI program to add items in listbox widget and to print and 
# delete the selected items from listbox on button click. Provide three separate 
# buttons to add, print and delete. 
 
import tkinter as tk 
from tkinter import messagebox 
 
# Function to add item to the Listbox 
def add_item(): 
    item = entry.get()  # Get the item from the entry field 
    if item:  # Check if the entry is not empty 
        listbox.insert(tk.END, item)  # Add item to the Listbox 
        entry.delete(0, tk.END)  # Clear the entry field 
    else: 
        messagebox.showwarning("Warning", "Please enter an item to add.") 
 
# Function to print the selected item from the Listbox 
def print_selected_item(): 
    try: 
        selected_item = listbox.get(listbox.curselection()) 
        print(f"Selected Item: {selected_item}")  # Print the selected item 
    except tk.TclError: 
 
        messagebox.showwarning("Warning", "Please select an item to print.") 
 
# Function to delete the selected item from the Listbox 
def delete_selected_item(): 
    try: 
        selected_index = listbox.curselection()[0] 
        listbox.delete(selected_index)  # Remove the selected item 
    except IndexError: 
        messagebox.showwarning("Warning", "Please select an item to delete.") 
 
# Create the main window 
frm = tk.Tk() 
frm.title("Listbox Example") 
 
# Create a Listbox 
listbox = tk.Listbox(frm, selectmode=tk.SINGLE) 
listbox.pack(pady=10) 
 
# Entry field to add items 
entry = tk.Entry(frm) 
entry.pack(pady=10) 
 
# Create Add button 
add_button = tk.Button(frm, text="Add Item", command=add_item) 
add_button.pack(pady=5) 
 
# Create Print button 
print_button = tk.Button(frm, text="Print Selected Item", 
command=print_selected_item) 
print_button.pack(pady=5) 
 
# Create Delete button 
delete_button = tk.Button(frm, text="Delete Selected Item", 
command=delete_selected_item) 
delete_button.pack(pady=5) 
 
 
 
# SLIP 17(A) 
# Write Python GUI program that takes input string and change letter to upper 
# case when a button is pressed. 
 
import tkinter as tk 
 
frm=tk.Tk(); 
 
def covertupper(): 
   st=txts.get(); 
 
    lblans.config(text=st.upper()); 
 
txts=tk.Enter(frm,width=30); 
lblans=tk.Label(frm,text="") 
btn1=tk.Button(fem,text="Pressme",command=covertupper) 
txts.pack(pady=10); 
btn1.pack(pady=10); 
lblans.pack();  
 
# SLIP 17(B) 
# Define a class Date (Day, Month, Year) with functions to accept and display 
# it. Accept date from user. Throw user defined exception “invalid Date 
# Exception” if the date is invalid. 
 
class MyDate: 
    def accept(self): 
        self.d=int(input("Enter Day:")) 
        self.m=int(input("Enter Month:")) 
        self.y=int(input("Enter Year:")) 
    def display(self): 
        try: 
            if self.d>31: 
                raise ValueError("Day value is greater than 31") 
            if self.m>12: 
                raise ValueError("Month Value is Greater than 12") 
            print("Date is: ", self.d, "-" ,self.m , "-",self.y ) 
        except ValueError as e: 
            print(e) 
Obj=MyDate() 
Obj.accept() 
Obj.display() 
 
 
# SLIP 18(A) 
# Create a list a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] and write a python 
# program that prints out all the elements of the list that are less than 5 
 
li= [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]  
for i in range(0,len(li)): 
    if(i<=5): 
        print(li[i]); 
 
 
# SLIP 18(B) 
# Write a python script to define the class person having members name, address. 
# Create a subclass called Employee with members staffed salary. Create 'n' 
# objects of the Employee class and display all the details of the employee. 
 
 
class Person: 
    def __init__(self, name, address): 
        self.name = name          # Initialize name 
        self.address = address    # Initialize address 
 
    def display(self): 
        # Display the person's details 
        print(f"Name: {self.name}, Address: {self.address}") 
 
class Employee(Person): 
    def __init__(self, name, address, staffed, salary): 
        super().__init__(name, address)  # Initialize parent class attributes 
        self.staffed = staffed            # Initialize staffed status 
        self.salary = salary              # Initialize salary 
 
    def display(self): 
        # Display the employee's details 
        super().display()  # Call the parent's display method 
        print(f"Staffed: {self.staffed}, Salary: {self.salary}") 
 
# Main program 
if __name__ == "__main__": 
    n = int(input("Enter the number of employees: "))  # Number of employees 
    employees = []  # List to store employee objects 
 
    for _ in range(n): 
        # Input details for each employee 
        name = input("Enter employee name: ") 
        address = input("Enter employee address: ") 
        staffed = input("Is the employee staffed? (yes/no): ") 
        salary = float(input("Enter employee salary: ")) 
 
        # Create an Employee object and add it to the list 
        employee = Employee(name, address, staffed.lower() == 'yes', salary) 
        employees.append(employee) 
 
    print("\nEmployee Details:") 
    for emp in employees: 
        emp.display()  # Display details of each employee 
        print()  # Print a newline for better readability 
 
 
# SLIP 19(A) 
# Write a Python GUI program to accept a number form user and display its 
# multiplication table on button click. 
 
import tkinter as tk; 
frm=tk.Tk(); 
 
def mult(): 
    n=int(txt.get()) 
    for i in Range(1,11): 
        print(i*n); 
 
lbl1=tk.Label(frm,text="Enter Number") 
txt=tk.Entry(frm,width=10) 
btn=tk.Button(frm,text="Display Table",command=mult) 
 
lbl1.pack(); 
txt.pack(); 
btn.pack(); 
 
 
# SLIP 19(B) 
# Define a class named Shape and its subclass(Square/ Circle). The subclass has 
# an init function which takes an argument (Lenght/redious). Both classes should 
# have methods to calculate area and volume of a given shape. 
 
class Shape: 
    def vol(s): 
        pass 
    def area(s): 
        pass 
class Square(Shape): 
    def __init__(s): 
        s.l=int(input("Enter side of square")) 
    def area(s): 
        print("area of square: ",s.l*s.l) 
    def vol(s): 
        print("Volume of square: ",s.l**3) 
 
class Circle(Shape): 
    def __init__(s): 
        s.r=int(input("Enter radius of square")) 
    def area(s): 
        print("area of circle: ",3.14*s.r*s.r) 
    def vol(s): 
        print("Volume of circle: ",(4/3*3.14*s.r**3)) 
 
 
ch=int(input("ENter 1 for square 2 for circle")) 
if ch==1: 
    ob=Square() 
    ob.area() 
    ob.vol() 
elif ch==2: 
    ob=Circle() 
    ob.area() 
    ob.vol() 
 
 
# SLIP 20(A) 
# Write a python program to create a class Circle and Compute the Area and the 
# circumferences of the circle.(use parameterized constructor) 
 
class Circle: 
    def __init__(self,r): 
        self.r=r 
    def cal(self): 
       area=3.14*self.r*self.r 
       print("Area of Circle:",area) 
       circum=2*3.14*self.r 
       print("Circumference of Circle:",circum) 
c=Circle(3) 
c.cal() 
 
# SLIP 20(B) 
# Write a Python script to generate and print a dictionary which contains a 
number (between 1 and n) in the form(x,x*x). Sample Dictionary (n=5) Expected 
Output: {1:1, 2:4, 3:9, 4:16, 5:25} 
 
n=int(input("Enter a number:")); 
d={} 
for i in range(1,n+1): 
    d[i]=i*i; 
print(d); 
 
 
# SLIP 21(A) 
# Define a class named Rectangle which can be constructed by a length and width. 
# The Rectangle class has a method which can compute the area and Perimeter. 
 
class Rectangle: 
    def __init__(self, l, w): 
        self.length = l 
        self.width = w 
 
    def area(self): 
        return self.length*self.width 
    def perimeter(self): 
        return 2*(self.l+self.w) 
r = Rectangle(12, 10) 
print(r.area()) 
print(r.perimeter()) 
 
 
# SLIP 21(B) 
# Write a Python program to convert a tuple of string values to a tuple of 
# integer values. Original tuple values: (('333', '33'), ('1416', '55')) New 
# tuple values: ((333, 33), (1416, 55)) 
 
 
original_tuple = (('333', '33'), ('1416', '55')) 
 
new_tuple_list = [] 
 
for inner in original_tuple: 
    inner_tuple = [] 
     
    for value in inner: 
         
        inner_tuple.append(int(value)) 
     
     
    new_tuple_list.append(tuple(inner_tuple)) 
 
new_tuple = tuple(new_tuple_list) 
 
print("Original tuple values:", original_tuple) 
print("New tuple values:", new_tuple) 
 
 
 
# SLIP 22(A) 
# Write a python class to accept a string and number n from user and display n 
# repetition of strings by overloading * operator. 
 
# Function to repeat a string n times 
def repeat_string(string, n): 
    if isinstance(n, int) and n >= 0:  # Check if n is a non-negative integer 
        return string * n 
    else: 
 
        raise ValueError("The number of repetitions must be a non-negative 
integer.") 
 
if __name__ == "__main__": 
    # Accept user input for the string and number of repetitions 
    user_string = input("Enter a string: ") 
    n = int(input("Enter a number of repetitions: ")) 
 
    try: 
        # Get the repeated string using the function 
        result = repeat_string(user_string, n) 
 
        # Display the result 
        print("Result:", result) 
    except ValueError as e: 
        print("Error:", e) 
 
 
 
# SLIP 22(B) 
# Write a python script to implement bubble sort using list 
 
def Bsort(li): 
    n=len(li) 
    for i in range(n): 
            for j in range(0,n-i-1): 
                    if li[j]>li[j+1]: 
                        li[j]=li[j+1] 
                        li[j+1]=li[j] 
print ("List after sorting:",li) 
 
li=int(input("Enter a list:")) 
print("List before sorting:",li) 
Bsort(li) 
 
 
# SLIP 23(A) 
# Write a Python GUI program to create a label and change the label font style 
# (font name, bold, size) using tkinter module. 
 
import tkinter as tk; 
frm=tk.Tk(); 
 
def changestyle(): 
    lbl1.config(font=("courier",30,"bold")); 
 
lbl1=tk.Label(frm,text="this is default text") 
 
btn=tk.Button(frm,text="Display Table",command=changestyle) 
 
lbl1.pack(); 
btn.pack(); 
 
 
# SLIP 23(B) 
# Create a class circles having members radius. Use operator overloading to add 
# the radius of two circle objects. Also display the area of circle. 
 
import math 
 
class Circle: 
    def __init__(self, radius): 
        self.radius = radius  # Initialize the radius 
 
    def __add__(self, other): 
        # Overload the + operator to add the radius of two circles 
        if isinstance(other, Circle): 
            return Circle(self.radius + other.radius) 
        else: 
            raise ValueError("Operand must be an instance of Circle.") 
 
    def area(self): 
        # Calculate the area of the circle 
        return math.pi * (self.radius ** 2) 
 
# Main program 
if __name__ == "__main__": 
    # Accept user input for the radii of two circles 
    radius1 = float(input("Enter the radius of the first circle: ")) 
    radius2 = float(input("Enter the radius of the second circle: ")) 
 
    # Create Circle objects 
    circle1 = Circle(radius1) 
    circle2 = Circle(radius2) 
 
    # Add the two circles using the overloaded + operator 
    circle3 = circle1 + circle2 
 
    # Display the radii and area of the resulting circle 
    print(f"Radius of Circle 1: {circle1.radius}") 
    print(f"Radius of Circle 2: {circle2.radius}") 
    print(f"Radius of Circle 3 (sum of radii): {circle3.radius}") 
    print(f"Area of Circle 3: {circle3.area():.2f}") 
 
 
# SLIP 24(A) 
# Write a Python Program to Check if given number is prime or not. Also find 
# factorial of the given no using user defined function. 
 
def fact(n): 
    f=1; 
    for i in range(1,n+1): 
        f=f*i; 
print("Factorial of ",n," is ",f); 
 
n=int(input("Enter a number:")); 
for i in range(2,n/ /2+1): 
    if n%i==0: 
        print(n," is not Prime"); 
        break; 
    else: 
        print(n," is prime"); 
fact(n); 
 
 
# SLIP 24(B) 
# Write Python GUI program which accepts a number n to displays each digit of 
# number in words. 
 
import tkinter as tk; 
frm=tk.Tk(); 
 
def inwords(): 
    no=txt.get(); 
    for i in no: 
        if i=="1": 
            print("one"); 
        elif i=="2": 
            print("two"); 
        elif i=="3": 
            print("three"); 
        elif i=="4": 
            print("four"); 
        elif i=="5": 
            print("five"); 
        elif i=="6": 
            print("six"); 
        elif i=="7": 
            print("seven"); 
        elif i=="8": 
            print("eight"); 
 
         elif i=="9": 
            print("nine"); 
         elif i=="0": 
            print("zero"); 
 
lbl1=tk.Label(frm,text="Enter a Number"); 
txt=tk.Entry(frm,width=10); 
btn=tk.Button(frm,text="Display Table",command=inwords) 
 
lbl1.pack(); 
btn.pack(); 
txt.pack();  
 
 
# SLIP 25(A) 
# Write a Python function that accepts a string and calculate the number of 
# upper case letters and lower case letters. Sample String : 'The quick Brow 
# Fox'  
# Expected Output : No. of Upper case characters : 3 No. of Lower case 
# Characters : 12 
 
def UpperLower(s): 
upp=0,low=0; 
    for i in s: 
        if ch.isLower(): 
          low=low+1; 
        elif ch.isUpper(): 
            upp=upp+1; 
print("Total Upper Cases: ",upp); 
print("Total Lower Cases: ",low); 
 
s=imput("Enter a String:"); 
UpperLower(s); 
 
# SLIP 25(B) 
# Write a Python script to Create a Class which Performs Basic Calculator 
# Operations 
 
class Calculator: 
    def add(self,a,b): 
        print("Addition:",self.a+self.b) 
    def sub(self,a,b): 
        print("Subtraction:",self.a-self.b) 
    def mult(self,a,b): 
        print("Multiplication:",self.a*self.b) 
    def div(self,a,b): 
        print("Division:",self.a/self.b) 
 
 
c=Calculator() 
a=int (input("Enter a number:")) 
b=int (input("Enter a number:")) 
ch=int (input("Enter Choice:(+,-,*,/)")) 
 
if ch=='+': 
    c.add(a,b) 
elif ch=='-': 
    c.sub(a,b) 
elif ch=='*': 
    c.mult(a,b) 
else: 
    c.div(a,b) 
 


# SLIP 26(A) 
# Write an anonymous function to find area of square and rectangle 
rec=lambda l,b:l*b 
sq=lambda s:s*s 
 
l=int(input("Enter length")) 
b=int(input("Enter breadth")) 
s=int(input("Enter side")) 
 
print("Area of Rectangle: ",rec(l,b)) 
print("Area of Square: ",sq(s)) 
 


# SLIP 26(B) 
# Write Python GUI program which accepts a sentence from the user and alters it 
# when a button is pressed. Every space should be replaced by *, case of all 
# alphabets should be reversed, digits are replaced by?. 
 
import tkinter as tk; 
frm=tk.Tk(); 
 
def alterstring(): 
    st=txt.get(); 
    st1=st.replace(" ","*"); 
    st1=st1.swapcase(); 
    no="0987654321"; 
    for x in no: 
        st1=st1.replace(x,"?"); 
 
lbl1=tk.Label(frm,text="Enter a Number"); 
txt=tk.Entry(frm,width=10); 
btn=tk.Button(frm,text="Display Table",command=alterstring) 
 
lbl1.pack(); 
txt.pack(); 
btn.pack(); 
lbl2=tk.Label(frm,text=""); 
lbl2.pack(); 




# SLIP 27(A) 
# Write a Python program to unzip a list of tuples into individual lists.  
# List of tuples 
list_of_tuples = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')] 
# Unzip the list of tuples into individual lists 
unzipped = list(zip(*list_of_tuples)) 
# Convert the tuples returned by zip to lists 
unzipped_lists = [list(item) for item in unzipped] 
# Display the unzipped lists 
for i, lst in enumerate(unzipped_lists): 
print(f"List {i+1}: {lst}") 



# SLIP 27(B) 
# Write Python GUI program to accept a decimal number and convert and display it 
# to binary, octal and hexadecimal number 
import tkinter as tk; 
frm=tk.Tk(); 
def convert(): 
no=int(txt.get()); 
print(bin(no)); 
print(oct(no)); 
print(hex(no)); 
lbl1=tk.Label(frm,text="Enter a Number"); 
txt=tk.Entry(frm,width=10); 
btn=tk.Button(frm,text="Display Table",command=convert) 
lbl1.pack(); 
txt.pack(); 
btn.pack(); 



# SLIP 28(A) 
# Write a Python GUI program to create a list of Computer Science Courses using 
# Tkinter module (use Listbox). 
import tkinter as tk; 
frm=tk.Tk(); 
list1=tk.Listbox(frm) 
list1.insert(1,"Java"); 
list1.insert(2,"PHP"); 
list1.pack(); 



# SLIP 28(B) 
# Write a Python program to accept two lists and merge the two lists into list 
# of tuple. 
list1 = eval(input("Enter the first list :")) 
list2 = eval(input("Enter the second list :")) 
mergelist=[] 
tp1=tuple(list1) 
print(tp1); 
mergelist.append(tuple(list1)) 
mergelist.append(tuple(list2)) 
print("Merged list of tuples:", mergelist) 


# SLIP 29(A) 
# Write a Python GUI program to calculate volume of Sphere by accepting radius 
# as input. 
import tkinter as tk 
frm=tk.Tk(); 
def displayvolume(): 
r=int(txtRd.get()) 
vol=4/3*3.14*r**3; 
lblAnswer.config(text=vol); 
label1=tk.Label(frm,text="Enter Radius"); 
label1.pack(pady=10); 
lblAnswer=tk.Label(frm,text="") 
txtRd=tk.Entry(frm,width=30) 
txtRd.pack(pady=10) 
btn1=tk.Button(fem,text="Display Volume",command=displayvolume) 
btn1.pack(); 
lblAnswer.pack(pady=10); 



# SLIP 29(B) 
# Write a Python script to sort (ascending and descending) a dictionary by key 
# and value. 
# Sample dictionary 
sample_dict = { 
'banana': 3, 
'apple': 5, 
'orange': 2, 
'mango': 4 
} 
# Sorting the dictionary by keys (ascending) 
sorted_by_keys_asc = dict(sorted(sample_dict.items())) 
print("Sorted by keys (ascending):", sorted_by_keys_asc) 
# Sorting the dictionary by keys (descending) 
sorted_by_keys_desc = dict(sorted(sample_dict.items(), reverse=True)) 
print("Sorted by keys (descending):", sorted_by_keys_desc) 
# Sorting the dictionary by values (ascending) 
sorted_by_values_asc = dict(sorted(sample_dict.items(), key=lambda item: 
item[1])) 
print("Sorted by values (ascending):", sorted_by_values_asc) 
# Sorting the dictionary by values (descending) 
sorted_by_values_desc = dict(sorted(sample_dict.items(), key=lambda item: 
item[1], reverse=True)) 
print("Sorted by values (descending):", sorted_by_values_desc) 


# SLIP 30(A) 
# Write a Python GUI program to accept a string and a character from user and 
# count the occurrences of a character in a string. 
import tkinter as tk 
frm=tk.Tk(); 
def displayocc(): 
str=label1.get(); 
 
    ch=label2.get(); 
    print("Occurance of",ch,"in",str,"is",str.count(ch)) 
     
txts=tk.Entry(frm,width=30); 
txtc=tk.Entry(frm,width=30); 
 
label1=tk.Label(frm,text="Enter String"); 
label1.pack(pady=10); 
txts.pack(); 
 
label2=tk.Label(frm,text="Enter char") 
label2.pack(pady=10); 
txtc.pack(); 
 
btn1=tk.Button(frm,text="Count",command=displayocc) 
btn1.pack(); 
 
 
# SLIP 30(B) 
# Python Program to Create a Class in which One Method Accepts a String from the 
# User and Another method Prints it. Define a class named Country which has a 
# method called print Nationality. Define subclass named state from Country 
# which has a mehtod called printState. Write a method to print state, country 
# and nationality. 
 
class Country: 
    def AcceptCountry(self): 
        self.cname=input("Enter Country Name: ") 
    def DisplayCountry(self): 
        print("Country Name is:", self.cname) 
class State(Country): 
    def AcceptState(self): 
        self.sname=input("Enter State Name: ") 
    def DisplayState(self): 
        print("State Name is:", self.sname) 
Obj=State() 
Obj.AcceptCountry() 
Obj.AcceptState() 
Obj.DisplayCountry() 
Obj.DisplayState() 